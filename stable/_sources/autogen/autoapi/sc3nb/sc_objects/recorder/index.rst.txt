:mod:`sc3nb.sc_objects.recorder`
================================

.. py:module:: sc3nb.sc_objects.recorder

.. autoapi-nested-parse::

   Module for recording

   ..
       !! processed by numpydoc !!


Module Contents
---------------

 



Class List
~~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   sc3nb.sc_objects.recorder.RecorderState
   sc3nb.sc_objects.recorder.Recorder



Content
~~~~~~~

.. class:: RecorderState

   **Bases:** :class:`enum.Enum`

   
   Different States
















   ..
       !! processed by numpydoc !!


   .. py:attribute:: UNPREPARED
      :value: 'UNPREPARED'

      

   .. py:attribute:: PREPARED
      :value: 'PREPARED'

      

   .. py:attribute:: RECORDING
      :value: 'RECORDING'

      

   .. py:attribute:: PAUSED
      :value: 'PAUSED'

      






.. class:: Recorder(path: str = 'record.wav', nr_channels: int = 2, rec_header: str = 'wav', rec_format: str = 'int16', bufsize: int = 65536, server: Optional[sc3nb.sc_objects.server.SCServer] = None)


   Allows to record audio easily.


   Create and prepare a recorder.


   :Parameters:

       **path** : str, optional
           path of recording file, by default "record.wav"

       **nr_channels** : int, optional
           Number of channels, by default 2

       **rec_header** : str, optional
           File format, by default "wav"

       **rec_format** : str, optional
           Recording resolution, by default "int16"

       **bufsize** : int, optional
           size of buffer, by default 65536

       **server** : SCServer, optional
           server used for recording,
           by default use the SC default server














   ..
       !! processed by numpydoc !!





   **Overview:**

   .. autoapisummary::
      :nosignatures:

         sc3nb.sc_objects.recorder.Recorder.prepare
         sc3nb.sc_objects.recorder.Recorder.start
         sc3nb.sc_objects.recorder.Recorder.pause
         sc3nb.sc_objects.recorder.Recorder.resume
         sc3nb.sc_objects.recorder.Recorder.stop
         sc3nb.sc_objects.recorder.Recorder.__repr__
         sc3nb.sc_objects.recorder.Recorder.__del__

   .. py:method:: prepare(path: str = 'record.wav', nr_channels: int = 2, rec_header: str = 'wav', rec_format: str = 'int16', bufsize: int = 65536)

      
      Pepare the recorder.


      :Parameters:

          **path** : str, optional
              path of recording file, by default "record.wav"

          **nr_channels** : int, optional
              Number of channels, by default 2

          **rec_header** : str, optional
              File format, by default "wav"

          **rec_format** : str, optional
              Recording resolution, by default "int16"

          **bufsize** : int, optional
              size of buffer, by default 65536





      :Raises:

          RuntimeError
              When Recorder does not needs to be prepared.









      ..
          !! processed by numpydoc !!

   .. py:method:: start(timetag: float = 0, duration: Optional[float] = None, node: Union[sc3nb.sc_objects.node.Node, int] = 0, bus: int = 0)

      
      Start the recording.


      :Parameters:

          **timetag** : float, by default 0 (immediately)
              Time (or time offset when <1e6) to start

          **duration** : float, optional
              Length of the recording, by default until stopped.

          **node** : Union[Node, int], optional
              Node that should be recorded, by default 0

          **bus** : int, by default 0
              Bus that should be recorded





      :Raises:

          RuntimeError
              When trying to start a recording unprepared.









      ..
          !! processed by numpydoc !!

   .. py:method:: pause(timetag: float = 0)

      
      Pause the recording.


      :Parameters:

          **timetag** : float, by default 0 (immediately)
              Time (or time offset when <1e6) to pause





      :Raises:

          RuntimeError
              When trying to pause if not recording.









      ..
          !! processed by numpydoc !!

   .. py:method:: resume(timetag: float = 0)

      
      Resume the recording


      :Parameters:

          **timetag** : float, by default 0 (immediately)
              Time (or time offset when <1e6) to resume





      :Raises:

          RuntimeError
              When trying to resume if not paused.









      ..
          !! processed by numpydoc !!

   .. py:method:: stop(timetag: float = 0)

      
      Stop the recording.


      :Parameters:

          **timetag** : float, by default 0 (immediately)
              Time (or time offset when <1e6) to stop





      :Raises:

          RuntimeError
              When trying to stop if not started.









      ..
          !! processed by numpydoc !!

   .. py:method:: __repr__() -> str

      
      Return repr(self).
















      ..
          !! processed by numpydoc !!

   .. py:method:: __del__()







